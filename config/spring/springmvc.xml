<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 静态资源解析，包括js/css/img…… -->
	<!-- 访问js打头的url时，映射到js下所有的文件 -->
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/>
	
	<!-- 注解的handler -->
	<!-- <bean class="cn.springmvco1.controller.ItermsController03"/> -->
	<!-- 实际开发中建议使用组件扫描，扫描多个controller、service…… 这里扫描controller，指定controller的包即可 -->
	<context:component-scan base-package="cn.ssm.test.controller"></context:component-scan>

	<!-- 使用mvc的注解驱动mvc:annotation-driven，可以省去上边的注解映射器和注解适配器 比如json转换解析器就默认加载了，如果使用mvc:annotation-driven，就不用配置RequestMappingHandlerMapping和RequestMappingHandlerAdapter 
		实际开发中使用annotation-driven -->
	<!-- 由于简化了适配器映射器的配置，没有办法直接在适配器中配置converter，所以在mvc:annotation-driven中注入 conversion-service引用了一个bean，这个bean完成了自定义参数绑定 -->
	<mvc:annotation-driven conversion-service="conversionService"
		validator="validator">
		</mvc:annotation-driven>

	<!-- 自定义参数绑定 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 在FormattingConversionServiceFactoryBean中注入自己的转换器 -->
		<property name="converters">
			<!-- 有list可以知道，我们可以有多个转换器 -->
			<list>
				<bean class="cn.ssm.test.controller.converter.CustomDataConverter" />
			</list>
		</property>
	</bean>

	<!-- 视图解析器 ,解析jsp，默认使用jstl标签 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 配置后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 添加校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中指定校验的错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	
	<!-- 全局异常处理器,只能有一个，只要实现了HandlerExceptionResolver接口即使全局异常处理器-->
	<bean class="cn.ssm.test.exception.CoustomExceptionResolver"/>
	
	<!-- 配置解析器 -->
		<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	 
</beans>

